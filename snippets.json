[
    {
      "id": 1,
      "title": "Hello World in Python",
      "code": "print('Hello, World!')",
      "language": "python",
      "timestamp": "2023-06-15T10:30:00Z"
    },
    {
      "id": 2,
      "title": "Basic HTML Structure",
      "code": "<!DOCTYPE html>\n<html>\n<head>\n  <title>Page Title</title>\n</head>\n<body>\n  <h1>My First Heading</h1>\n  <p>My first paragraph.</p>\n</body>\n</html>",
      "language": "html",
      "timestamp": "2023-06-14T09:15:00Z"
    },
  {
  "id": 1752814426495,
  "title": "Java Code",
  "code": "package com.ecom.service;\n\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.security.core.userdetails.UserDetailsService;\nimport org.springframework.security.core.userdetails.UsernameNotFoundException;\nimport com.ecom.model.User;\nimport com.ecom.model.UserType;\nimport com.ecom.repository.UserRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.security.crypto.password.PasswordEncoder;\nimport org.springframework.stereotype.Service;\n\nimport java.util.Date;\nimport java.util.UUID;\n\n@Service\npublic class UserService implements UserDetailsService {\n\n    @Autowired\n    private UserRepository userRepository;\n    \n    @Autowired\n    private PasswordEncoder passwordEncoder;\n    \n    @Autowired\n    private EmailService emailService;\n    @Override\n    public UserDetails loadUserByUsername(String email) throws UsernameNotFoundException {\n        System.out.println(\"Attempting to load user by email: \" + email);  // Debug log\n        User user = userRepository.findByEmail(email);\n\n        if (user == null) {\n            System.out.println(\"User not found with email: \" + email);  // Debug log\n            throw new UsernameNotFoundException(\"User not found with email: \" + email);\n        }\n\n        System.out.println(\"Found user: \" + user.getEmail() + \", enabled: \" + user.isEnabled());  // Debug log\n        System.out.println(\"Stored password: \" + user.getPassword());  // Debug log\n\n        return org.springframework.security.core.userdetails.User.builder()\n                .username(user.getEmail())\n                .password(user.getPassword())\n                .authorities(user.getUserType().name())\n                .disabled(!user.isEnabled())\n                .build();\n    }\n    \n    public User registerUser(User user, UserType userType) {\n        user.setPassword(passwordEncoder.encode(user.getPassword()));\n        user.setUserType(userType);\n        user.setEnabled(false);\n        user.setVerificationCode(UUID.randomUUID().toString());\n        \n        User savedUser = userRepository.save(user);\n        \n        // Send verification email\n        String verificationUrl = \"http://localhost:8080/verify?code=\" + user.getVerificationCode();\n        String emailText = \"Please verify your email by clicking the link: \" + verificationUrl;\n        emailService.sendEmail(user.getEmail(), \"Email Verification\", emailText);\n        \n        return savedUser;\n    }\n    \n    public boolean verifyUser(String verificationCode) {\n        User user = userRepository.findByVerificationCode(verificationCode);\n        \n        if (user == null || user.isEnabled()) {\n            return false;\n        }\n        \n        user.setEnabled(true);\n        user.setVerificationCode(null);\n        userRepository.save(user);\n        return true;\n    }\n    \n    public void initiatePasswordReset(String email) {\n        User user = userRepository.findByEmail(email);\n        if (user != null) {\n            user.setResetPasswordToken(UUID.randomUUID().toString());\n            user.setResetPasswordExpires(new Date(System.currentTimeMillis() + 3600000)); // 1 hour\n            userRepository.save(user);\n            \n            String resetUrl = \"http://localhost:8080/reset-password?token=\" + user.getResetPasswordToken();\n            String emailText = \"To reset your password, click the link: \" + resetUrl;\n            emailService.sendEmail(user.getEmail(), \"Password Reset\", emailText);\n        }\n    }\n    \n    public boolean resetPassword(String token, String newPassword) {\n        User user = userRepository.findByResetPasswordToken(token);\n        \n        if (user == null || user.getResetPasswordExpires().before(new Date())) {\n            return false;\n        }\n        \n        user.setPassword(passwordEncoder.encode(newPassword));\n        user.setResetPasswordToken(null);\n        user.setResetPasswordExpires(null);\n        userRepository.save(user);\n        return true;\n    }\n    \n    public User findByEmail(String email) {\n        return userRepository.findByEmail(email);\n    }\n    public User findByResetPasswordToken(String token) {\n        return userRepository.findByResetPasswordToken(token);\n    }\n\n}",
  "language": "java",
  "timestamp": "2025-07-18T04:53:46.495Z"
},
  ]
  
